{"version":3,"sources":["components/header/header.js","components/map/map.js","components/placeholder/placeholder.js","App.js","serviceWorker.js","index.js"],"names":["GridHeader","latest","confirmed","deaths","recovered","Grid","columns","divided","Row","Column","Image","src","size","verticalAlign","Statistic","color","inverted","Value","Label","calculateRadius","cases","multiplier","min","max","radius","LeafletMap","data","id","Map","center","zoom","TileLayer","attribution","url","locations","map","loc","Circle","coordinates","lat","long","Popup","province","country","PlaceholderExampleGrid","className","Menu","pointing","secondary","Item","name","href","target","rel","stackable","Segment","raised","Placeholder","Header","image","Line","Paragraph","length","App","useState","cData","setData","setLatest","isLoading","setLoading","useEffect","fetch","then","res","json","catch","err","console","log","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"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","file":"static/js/main.7f21b6bc.chunk.js","sourcesContent":["import React from 'react';\r\nimport { \r\n  Grid, \r\n  Image, \r\n  Statistic \r\n} from 'semantic-ui-react';\r\n\r\nconst GridHeader = (latest) => {\r\n  const { confirmed, deaths, recovered } = latest.latest\r\n  return (\r\n    <Grid columns={3} divided>\r\n      <Grid.Row>\r\n        <Grid.Column>\r\n          <Image src=\"https://cdn.frankerfacez.com/emoticon/434366/4\" size=\"small\" verticalAlign='middle' />\r\n          <Statistic color='yellow' inverted>\r\n            <Statistic.Value>{confirmed}</Statistic.Value>\r\n            <Statistic.Label>Confirmed Cases</Statistic.Label>\r\n          </Statistic>\r\n        </Grid.Column>\r\n        <Grid.Column>\r\n          <Image src=\"https://cdn.frankerfacez.com/emoticon/61496/4\" size=\"small\" verticalAlign='middle' />\r\n          <Statistic color='green' inverted>\r\n            <Statistic.Value>{recovered}</Statistic.Value>\r\n            <Statistic.Label>Recovered</Statistic.Label>\r\n          </Statistic>\r\n        </Grid.Column>\r\n        <Grid.Column>\r\n          <Image src=\"https://cdn.frankerfacez.com/emoticon/425799/4\" size=\"small\" verticalAlign='middle' />\r\n          <Statistic color='red' inverted>\r\n            <Statistic.Value>{deaths}</Statistic.Value>\r\n            <Statistic.Label>Deaths</Statistic.Label>\r\n          </Statistic>\r\n        </Grid.Column>\r\n      </Grid.Row>\r\n    </Grid>\r\n  )\r\n}\r\n\r\nexport default GridHeader;","import React from \"react\";\r\nimport { Map, TileLayer, Circle, Popup } from \"react-leaflet\";\r\n\r\nconst calculateRadius = (cases, multiplier, min, max) => {\r\n  // Calculate radius.\r\n  const radius = cases * multiplier;\r\n\r\n  // Check for min and max.\r\n  if (radius < min) return min;\r\n  if (radius > max) return max;\r\n\r\n  // Return radius.\r\n  return radius;\r\n}\r\n\r\nconst LeafletMap = ({ data: { confirmed } }) => {\r\n  const position = [ 35.0000, 103.0000 ];\r\n\r\n  return (\r\n    <div id=\"mapid\">\r\n      <Map center={position} zoom={4}>\r\n        <TileLayer\r\n          attribution='&amp;copy <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\r\n          url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\r\n        />\r\n        {confirmed.locations.map(loc => (\r\n          <Circle\r\n            center={[loc.coordinates.lat, loc.coordinates.long]}\r\n            radius={calculateRadius(loc.latest, 25, 15000, 500000)}\r\n            color=\"red\"\r\n          >\r\n            <Popup>\r\n              <div>\r\n                <h3>{`${loc.province ? loc.province : 'Province not specified'}, ${loc.country}`}</h3>\r\n                <p>{`Confirmed Cases: ${loc.latest}`}</p>\r\n              </div>\r\n            </Popup>\r\n          </Circle>\r\n        ))}\r\n      </Map>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default LeafletMap;\r\n","import React from \"react\";\r\nimport { Grid, Placeholder, Segment, Menu } from \"semantic-ui-react\";\r\n\r\nconst PlaceholderExampleGrid = () => (\r\n  <div className=\"App\">\r\n    <header className=\"App-header\">\r\n      <Menu pointing secondary inverted>\r\n        <Menu.Item name=\"editorials\">\r\n          <a\r\n            href=\"https://github.com/galoncyryll/COVID-19-tracker\"\r\n            target=\"_blank\"\r\n            rel=\"noopener noreferrer\"\r\n            className=\"github-link\"\r\n          >\r\n            <i className=\"github icon\"></i>\r\n          </a>\r\n        </Menu.Item>\r\n      </Menu>\r\n      <Grid columns={3} stackable>\r\n        <Grid.Column>\r\n          <Segment raised>\r\n            <Placeholder>\r\n              <Placeholder.Header image>\r\n                <Placeholder.Line />\r\n                <Placeholder.Line />\r\n              </Placeholder.Header>\r\n              <Placeholder.Paragraph>\r\n                <Placeholder.Line length=\"medium\" />\r\n                <Placeholder.Line length=\"short\" />\r\n              </Placeholder.Paragraph>\r\n            </Placeholder>\r\n          </Segment>\r\n        </Grid.Column>\r\n\r\n        <Grid.Column>\r\n          <Segment raised>\r\n            <Placeholder>\r\n              <Placeholder.Header image>\r\n                <Placeholder.Line />\r\n                <Placeholder.Line />\r\n              </Placeholder.Header>\r\n              <Placeholder.Paragraph>\r\n                <Placeholder.Line length=\"medium\" />\r\n                <Placeholder.Line length=\"short\" />\r\n              </Placeholder.Paragraph>\r\n            </Placeholder>\r\n          </Segment>\r\n        </Grid.Column>\r\n\r\n        <Grid.Column>\r\n          <Segment raised>\r\n            <Placeholder>\r\n              <Placeholder.Header image>\r\n                <Placeholder.Line />\r\n                <Placeholder.Line />\r\n              </Placeholder.Header>\r\n              <Placeholder.Paragraph>\r\n                <Placeholder.Line length=\"medium\" />\r\n                <Placeholder.Line length=\"short\" />\r\n              </Placeholder.Paragraph>\r\n            </Placeholder>\r\n          </Segment>\r\n        </Grid.Column>\r\n      </Grid>\r\n    </header>\r\n  </div>\r\n);\r\n\r\nexport default PlaceholderExampleGrid;\r\n","import React, {useEffect, useState} from 'react';\r\nimport './App.css';\r\nimport { Menu } from 'semantic-ui-react';\r\n\r\n// components\r\nimport GridHeader from './components/header/header';\r\nimport Map from './components/map/map';\r\nimport PlaceHolder from './components/placeholder/placeholder';\r\n\r\nconst App = () => {\r\n  const [cData, setData] = useState();\r\n  const [latest, setLatest] = useState();\r\n  const [isLoading, setLoading] = useState(true);\r\n\r\n  useEffect(() => {\r\n    fetch('https://coronavirus-tracker-api.herokuapp.com/all')\r\n      .then(res => res.json())\r\n      .then(data => {\r\n        setLatest(data.latest)\r\n        setData(data);\r\n        setLoading(false);\r\n      }).catch(err => {\r\n        console.log(`Error fetching: ${err}`);\r\n      });\r\n  },[])\r\n\r\n  if (isLoading) {\r\n    return <PlaceHolder />\r\n  }\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <header className=\"App-header\">\r\n        <Menu\r\n          pointing \r\n          secondary\r\n          inverted\r\n        >\r\n          <Menu.Item\r\n            name='editorials'\r\n          >\r\n            <a \r\n              href=\"https://github.com/galoncyryll/COVID-19-tracker\" \r\n              target=\"_blank\"\r\n              rel=\"noopener noreferrer\"\r\n              className=\"github-link\"\r\n            >\r\n              <i className=\"github icon\"></i>\r\n            </a>\r\n          </Menu.Item>\r\n        </Menu>\r\n        <GridHeader latest={latest}/>\r\n      </header>\r\n      <Map data={cData}/>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}